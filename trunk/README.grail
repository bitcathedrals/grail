   ---> Getting started with grail <----

To use Grail to load your Emacs configuration you first need to
install it, and then incrementally migrate your .emacs into the files
recognized by grail.

   ---> Installing Grail. <----

1. Choose a directory where your Emacs configuration will live. From
   here on this directory will be referred to as USER_ELISP.

2. copy grail.el, and grail-fn.el into USER_ELISP

3. Copy your Emacs configuration to a safe place.

4. Create a link pointing .emacs in your home directory to grail.el
   in USER_ELISP.

   example: ln -s $HOME/system/emacs/grail.el .emacs

   !Make sure you moved your .emacs configuration out of the way!

5. Set the environment variable USER_ELISP to the directory where
   Grail and your configuration now live. It must be a *full path*

   example: export USER_ELISP=$HOME/system/emacs/
   note: a trailing slash is not required.

   If you place your configuration in $HOME/system/emacs as I
   do you do not need to set USER_ELISP.

***You can now start Emacs now with a bare Grail***

6. move your Emacs configuration into USER_ELISP

   To get Emacs back up and running with your configuration right
   away you can move your configuration into USER_ELISP/user.el.

   If you already have split your configuration up, you can replace
   your (load PATH) calls to the seperated files that have been
   hardcoded with (load-user-elisp FILE). This function automatically
   prefixes USER_ELISP to the path, and traps any errors that occur
   when loading the file.

Grail is now installed!

         ---> The USER_ELISP directory structure. <----

Inside USER_ELISP Grail looks for directories and files that are treated specially.
Any other files and directories are ignored by Grail.


$HOME/.emacs.d/            | all of emacs scribbles here by default so I treat
                           | it like /var, both session files and persistent data
                           | for emacs packages.

$USER_ELISP                | the directory with Grail and your Emacs configuration.
                           | seperating it from .emacs.d/ allows you to put the
                           | configuration under version control or easily back
                           | it up to a .zip or tarball.

All of the following paths are relative to user-elisp-root. Other files are
ignored by grail, and must be called from one of the grail recognized files.

grail.el                   | entry point for emacs startup and stage #1
                           | of the configuration.

grail-fn.el                | library of functions essential to stage #1, and
                           | more complex functions for stage #2 (groups & ELPA)

elisp.el                   | Elisp functions that are not interactive (commands)
                           | loaded when Emacs is called with --script or --batch.

---> Platform Files <---

linux.el                   | only loaded on Gnu/Linux.
darwin.el                  | only loaded on darwin.

---> Files loaded When Emacs is used interactively <---

with an interface: TTY, or GUI.

user.el                    | user customization of Emacs. Anything can go in here
                           | though placing GUI related configuration is not
                           | advised.

commands.el                | user commands only loaded in interactive Emacs. It is
                           | not necessary to create this file, it does help keep things
                           | tidy.

keys.el                    | user key-binding customization, not necessary but tidy.

interface.el               | configure the Emacs interface. Only the configuration
                           | that is TTY safe should be put here if you use Emacs
                           | in a TTY, or both.

---> GUI <---

display.el                 | This is called when emacs creates a TTY or GUI display.

                           | By comparison interface.el always runs when emacs is
                           | interactive wether there is a display or not (in daemon
                           | mode). display.el is loaded only when Emacs creates a
                           | frame.

                           | If you want to be _really_ tidy this is a good place
                           | to put colors (faces) and other display only bits.

gui.el                     | Only loaded when Emacs is used in a GUI. This file is
                           | loaded after the frame is created to set configuration
                           | bits that rely on the basic Emacs GUI definitions and
                           | initialization.

---> load-path <---

load-path is a list of directories that Emacs searches to find Elisp files.
Grail will add to the load-path in a scheme that allows the user add directories
to the load-path or replace the Elisp files distributed with Emacs.

When a directory has an asterick "*" any sub-directories directly beneath the directory
are added as well.

---> User Elisp Directories <---

A place for the user's Elisp files. All these directories are relative (a sub-directory of)
USER_ELISP. Indented directories are sub-directories.

local/                            | where all the user's elisp directories live. *Not added to load-path*

     elisp/(*)                    | elisp maintained by the user, it does not over-ride anything.

            emacs/                | local elisp that modifies or replaces packages/files distributed
                                  |  with the mainline.

            groups/               | groups combine loading,deploying,and configuring one
                                  | or more packages into a cohesive configuration for
                                  | a set of related features.

dist/
     elisp/(*)                    | elisp maintained and distributed by a Third Party. Things
                                  | that you download from emacswiki and other web-sites would
                                  | go here. If you can find the package in ELPA that is the
                                  | recommended way to install Emacs packages.

     elpa/                        | elisp maintained by ELPA. This is not added to the load-path
                                  | directly, ELPA stores files here, and manages load-path as well.

---> Configuring the GUI <---

Grail has some functions for setting faces that are conveinant. If you use the customize
facility you should not need it. If you want to maintain your colors and other face
properties on your own you can use: grail-set-faces.

grail-set-faces takes a list of faces to be set. Each face has a list of attributes
to set. The attributes are names, not attribute syntax. :foo would be just foo.

Note that I have put setting faces in gui.el so it is loaded after the first GUI frame
is created, otherwise I have encountered problems with using emacs --daemon. If you
put these kinds of configuration in gui.el Grail will load them at the right time.

Here is a peice of my configuration as an example:

(grail-set-faces
  ;; the default face

  (default
    (background "grey5")
    (foreground "grey70")
    (inverse-video nil)
    (box nil)
    (strike-through nil)
    (overline nil)
    (underline nil)
    (slant 'normal)
    (weight 'normal)
    (height 125)
    (width 'normal)
    (family "DejaVuLisp"))

  ;; comments are set off-tempature to distingiush them better.
  ;; orange was chosen as a red that wasn't harsh.
  (font-lock-comment-face (foreground "orange3"))

  ;; language syntax is the darkest shade of blue
  (font-lock-keyword-face (foreground "DeepSkyBlue4"))

  ;; grammar is the lightest shade of blue
  (font-lock-builtin-face (foreground "SkyBlue3"))

  ;; this should be for any form of literal value in code medium contrast.
  (font-lock-string-face  (foreground "grey50"))
  (font-lock-constant-face (foreground "grey50"))

  ;; decl is dark green
  (font-lock-type-face (foreground "green4"))
  (font-lock-function-name-face (foreground "aquamarine4"))
  (font-lock-variable-name-face (foreground "aquamarine3")) )
