Welcome to Mike Mattie's emacs configuration.

My Emacs configuration is weighted towards development in various
languages and of course Emacs hacking. This file consists of
integration instructions followed by a brief set of key features and
differences from a standard Emacs.

Installation

  1. unpack the tarball or checkout from the repository containing the
     configuration.

  2. at the toplevel of the configuration tree modify grail.el by
     changing the grail-elisp-root path to the path of where you
     want your emacs configuration tree relative to your home
     directory.

     Win32 WARNING: This assumes that HOME is set.

  3. create a link $HOME/.emacs pointing to grail.el at the root of the
     configuration tree.

     Example: ln -s ~/system/emacs/grail.el ~/.emacs.el

  My Configuration will at this point load. I highly recommend
  that you rename/move many of the files such as:

  user.el
  commands.el
  keys.el
  interface.el
  gui.el

  linux.el
  darwin.el

  so that you do not end up with a broken or idiosyncratic
  configuration right out of the gates.

  You can then sort your configuration file into these
  file names, and graft the ideas/configurations you
  like from my configuration.

Major differences:

tab is the dwim completion in as many modes as possible.

() characters are rebound in lisp modes to the [] keys
while shift-() is bound as []. This is only in lisp
modes. It is strange at first but truly awesome in a lisp
mode.

esc        -> is bound like alt-x for easier access.

shift-tab  -> switches to the other window.

alt-tab    -> switches buffers

ctrl-z     -> terminates recursion ; replaces signalling the window manager
              to minimize Emacs.

the search functions are regex by default.

you may see comments and literal strings underlined. This is the
spell-checker. Ignore or fix as you choose.

Integration:

The usual recommendation for a Emacs user is to learn a default
configuration, incorperating useful bits from others over time.

This configuration allows a user to benefit from the features of
an advanced configuration that is also modular.

Modular Configuration:

Many of the interesting features are enabled in "styles" which
combine a range of packages/settings into a single heading

examples: complete - completion features
          lisp.el  - lisp/elisp tuning

these are located in local/styles/*.el

enabling these styles is a simple function that can be placed anywhere
*after* grail itelf loads, such as user.el

example:

(use-styles "xml" "spell" "tab")

this loads the styles for xml,spelling,and tab completion.
